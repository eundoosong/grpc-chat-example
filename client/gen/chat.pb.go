// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_8d549370c4448cef, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type File struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_8d549370c4448cef, []int{1}
}
func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (dst *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(dst, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *File) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Url struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Url) Reset()         { *m = Url{} }
func (m *Url) String() string { return proto.CompactTextString(m) }
func (*Url) ProtoMessage()    {}
func (*Url) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_8d549370c4448cef, []int{2}
}
func (m *Url) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Url.Unmarshal(m, b)
}
func (m *Url) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Url.Marshal(b, m, deterministic)
}
func (dst *Url) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Url.Merge(dst, src)
}
func (m *Url) XXX_Size() int {
	return xxx_messageInfo_Url.Size(m)
}
func (m *Url) XXX_DiscardUnknown() {
	xxx_messageInfo_Url.DiscardUnknown(m)
}

var xxx_messageInfo_Url proto.InternalMessageInfo

func (m *Url) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "chat.Message")
	proto.RegisterType((*File)(nil), "chat.File")
	proto.RegisterType((*Url)(nil), "chat.Url")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	SendFile(ctx context.Context, opts ...grpc.CallOption) (ChatService_SendFileClient, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chat.ChatService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SendFile(ctx context.Context, opts ...grpc.CallOption) (ChatService_SendFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[0], "/chat.ChatService/SendFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceSendFileClient{stream}
	return x, nil
}

type ChatService_SendFileClient interface {
	Send(*File) error
	CloseAndRecv() (*Url, error)
	grpc.ClientStream
}

type chatServiceSendFileClient struct {
	grpc.ClientStream
}

func (x *chatServiceSendFileClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceSendFileClient) CloseAndRecv() (*Url, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Url)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	SendMessage(context.Context, *Message) (*Message, error)
	SendFile(ChatService_SendFileServer) error
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SendFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).SendFile(&chatServiceSendFileServer{stream})
}

type ChatService_SendFileServer interface {
	SendAndClose(*Url) error
	Recv() (*File, error)
	grpc.ServerStream
}

type chatServiceSendFileServer struct {
	grpc.ServerStream
}

func (x *chatServiceSendFileServer) SendAndClose(m *Url) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceSendFileServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ChatService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFile",
			Handler:       _ChatService_SendFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor_chat_8d549370c4448cef) }

var fileDescriptor_chat_8d549370c4448cef = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xbb, 0x49, 0x50, 0x3b, 0x55, 0x29, 0x7b, 0x31, 0xf4, 0x20, 0x65, 0x41, 0xc8, 0xa5,
	0x39, 0xe8, 0x1b, 0x44, 0xf0, 0xe6, 0xa5, 0xa5, 0x0f, 0xb0, 0xee, 0x0e, 0xed, 0xc2, 0xda, 0x2c,
	0x93, 0x35, 0x98, 0xb7, 0x97, 0x9d, 0x24, 0x42, 0x6f, 0xdf, 0x3f, 0xf3, 0xb1, 0xfb, 0x33, 0x00,
	0xe6, 0xac, 0x63, 0x1d, 0xa8, 0x8d, 0xad, 0x2c, 0x12, 0xab, 0x1d, 0xdc, 0x7e, 0x62, 0xd7, 0xe9,
	0x13, 0xca, 0x47, 0xc8, 0x9c, 0x2d, 0xc5, 0x56, 0x54, 0xcb, 0x7d, 0xe6, 0xac, 0x94, 0x50, 0x44,
	0xfc, 0x8d, 0x65, 0xc6, 0x13, 0x66, 0xd5, 0x40, 0xf1, 0xe1, 0x3c, 0xa6, 0xdd, 0x45, 0x7f, 0xe3,
	0x64, 0x33, 0xb3, 0x3f, 0x04, 0xfc, 0xf7, 0x87, 0xc0, 0x33, 0xab, 0xa3, 0x2e, 0xf3, 0xad, 0xa8,
	0xee, 0xf7, 0xcc, 0xea, 0x09, 0xf2, 0x23, 0x79, 0xb9, 0x86, 0xfc, 0x87, 0xfc, 0xf4, 0x42, 0xc2,
	0x57, 0x03, 0xab, 0xf7, 0xb3, 0x8e, 0x07, 0xa4, 0xde, 0x19, 0x94, 0x3b, 0x58, 0x1d, 0xf0, 0x62,
	0xe7, 0x7a, 0x0f, 0x35, 0x97, 0x9f, 0xe2, 0xe6, 0x3a, 0xaa, 0x85, 0x7c, 0x81, 0xbb, 0xa4, 0x73,
	0x3d, 0x18, 0x97, 0x89, 0x37, 0xcb, 0x91, 0x8f, 0xe4, 0xd5, 0xa2, 0x12, 0xcd, 0x33, 0xac, 0x39,
	0x77, 0x48, 0x3d, 0x52, 0x7d, 0xa2, 0x60, 0x1a, 0x98, 0xbf, 0x45, 0xfa, 0xba, 0xe1, 0xeb, 0xbc,
	0xfd, 0x05, 0x00, 0x00, 0xff, 0xff, 0xce, 0xe3, 0x43, 0x50, 0x2b, 0x01, 0x00, 0x00,
}
