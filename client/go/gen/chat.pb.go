// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_dab5f45f9ba17c2f, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type File struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Len                  int32    `protobuf:"varint,3,opt,name=len" json:"len,omitempty"`
	Data                 []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_dab5f45f9ba17c2f, []int{1}
}
func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (dst *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(dst, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *File) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *File) GetLen() int32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *File) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type FileIds struct {
	Id                   []string `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileIds) Reset()         { *m = FileIds{} }
func (m *FileIds) String() string { return proto.CompactTextString(m) }
func (*FileIds) ProtoMessage()    {}
func (*FileIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_dab5f45f9ba17c2f, []int{2}
}
func (m *FileIds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileIds.Unmarshal(m, b)
}
func (m *FileIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileIds.Marshal(b, m, deterministic)
}
func (dst *FileIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileIds.Merge(dst, src)
}
func (m *FileIds) XXX_Size() int {
	return xxx_messageInfo_FileIds.Size(m)
}
func (m *FileIds) XXX_DiscardUnknown() {
	xxx_messageInfo_FileIds.DiscardUnknown(m)
}

var xxx_messageInfo_FileIds proto.InternalMessageInfo

func (m *FileIds) GetId() []string {
	if m != nil {
		return m.Id
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "chat.Message")
	proto.RegisterType((*File)(nil), "chat.File")
	proto.RegisterType((*FileIds)(nil), "chat.FileIds")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	UploadFiles(ctx context.Context, opts ...grpc.CallOption) (ChatService_UploadFilesClient, error)
	DownloadFiles(ctx context.Context, in *FileIds, opts ...grpc.CallOption) (ChatService_DownloadFilesClient, error)
	ConvertFiles(ctx context.Context, opts ...grpc.CallOption) (ChatService_ConvertFilesClient, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chat.ChatService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UploadFiles(ctx context.Context, opts ...grpc.CallOption) (ChatService_UploadFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[0], "/chat.ChatService/UploadFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceUploadFilesClient{stream}
	return x, nil
}

type ChatService_UploadFilesClient interface {
	Send(*File) error
	CloseAndRecv() (*FileIds, error)
	grpc.ClientStream
}

type chatServiceUploadFilesClient struct {
	grpc.ClientStream
}

func (x *chatServiceUploadFilesClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceUploadFilesClient) CloseAndRecv() (*FileIds, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileIds)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) DownloadFiles(ctx context.Context, in *FileIds, opts ...grpc.CallOption) (ChatService_DownloadFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[1], "/chat.ChatService/DownloadFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceDownloadFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_DownloadFilesClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type chatServiceDownloadFilesClient struct {
	grpc.ClientStream
}

func (x *chatServiceDownloadFilesClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) ConvertFiles(ctx context.Context, opts ...grpc.CallOption) (ChatService_ConvertFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[2], "/chat.ChatService/ConvertFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceConvertFilesClient{stream}
	return x, nil
}

type ChatService_ConvertFilesClient interface {
	Send(*File) error
	Recv() (*File, error)
	grpc.ClientStream
}

type chatServiceConvertFilesClient struct {
	grpc.ClientStream
}

func (x *chatServiceConvertFilesClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceConvertFilesClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	SendMessage(context.Context, *Message) (*Message, error)
	UploadFiles(ChatService_UploadFilesServer) error
	DownloadFiles(*FileIds, ChatService_DownloadFilesServer) error
	ConvertFiles(ChatService_ConvertFilesServer) error
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UploadFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).UploadFiles(&chatServiceUploadFilesServer{stream})
}

type ChatService_UploadFilesServer interface {
	SendAndClose(*FileIds) error
	Recv() (*File, error)
	grpc.ServerStream
}

type chatServiceUploadFilesServer struct {
	grpc.ServerStream
}

func (x *chatServiceUploadFilesServer) SendAndClose(m *FileIds) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceUploadFilesServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatService_DownloadFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileIds)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).DownloadFiles(m, &chatServiceDownloadFilesServer{stream})
}

type ChatService_DownloadFilesServer interface {
	Send(*File) error
	grpc.ServerStream
}

type chatServiceDownloadFilesServer struct {
	grpc.ServerStream
}

func (x *chatServiceDownloadFilesServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_ConvertFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).ConvertFiles(&chatServiceConvertFilesServer{stream})
}

type ChatService_ConvertFilesServer interface {
	Send(*File) error
	Recv() (*File, error)
	grpc.ServerStream
}

type chatServiceConvertFilesServer struct {
	grpc.ServerStream
}

func (x *chatServiceConvertFilesServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceConvertFilesServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ChatService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFiles",
			Handler:       _ChatService_UploadFiles_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFiles",
			Handler:       _ChatService_DownloadFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConvertFiles",
			Handler:       _ChatService_ConvertFiles_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor_chat_dab5f45f9ba17c2f) }

var fileDescriptor_chat_dab5f45f9ba17c2f = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0x86, 0x59, 0x40, 0x1b, 0x07, 0x6a, 0x9a, 0x39, 0x61, 0x4f, 0x64, 0x4f, 0x1c, 0x5a, 0xd2,
	0xe8, 0x1b, 0xb4, 0xc6, 0xc4, 0x83, 0x49, 0x43, 0xf5, 0x01, 0x56, 0x76, 0xd2, 0x92, 0x20, 0xbb,
	0x81, 0x4d, 0xb5, 0x6f, 0xe8, 0x63, 0x99, 0xdd, 0xd2, 0x5a, 0xd2, 0xdb, 0x3f, 0xfc, 0x1f, 0xff,
	0xfe, 0x93, 0x01, 0x28, 0x77, 0xc2, 0xe4, 0xba, 0x55, 0x46, 0x61, 0x68, 0x35, 0x9f, 0xc3, 0xe8,
	0x8d, 0xba, 0x4e, 0x6c, 0x09, 0xef, 0xc1, 0xaf, 0x64, 0xc2, 0x52, 0x96, 0xdd, 0x15, 0x7e, 0x25,
	0x11, 0x21, 0x34, 0xf4, 0x63, 0x12, 0xdf, 0x7d, 0x71, 0x9a, 0xbf, 0x43, 0xf8, 0x52, 0xd5, 0x64,
	0xbd, 0x46, 0x7c, 0x51, 0x4f, 0x3b, 0xed, 0xf8, 0x83, 0xa6, 0x33, 0x7f, 0xd0, 0x84, 0x13, 0x08,
	0x6a, 0x6a, 0x92, 0x20, 0x65, 0xd9, 0x4d, 0x61, 0xa5, 0xa5, 0xa4, 0x30, 0x22, 0x09, 0x53, 0x96,
	0xc5, 0x85, 0xd3, 0xfc, 0x01, 0x46, 0x36, 0xf5, 0x55, 0x76, 0xe7, 0x12, 0xc1, 0xb1, 0xc4, 0xe3,
	0x2f, 0x83, 0x68, 0xb5, 0x13, 0x66, 0x43, 0xed, 0xbe, 0x2a, 0x09, 0xe7, 0x10, 0x6d, 0xa8, 0x91,
	0xa7, 0xce, 0xe3, 0xdc, 0x6d, 0xd4, 0x8f, 0xd3, 0xe1, 0xc8, 0x3d, 0x9c, 0x41, 0xf4, 0xa1, 0x6b,
	0x25, 0xa4, 0xcd, 0xef, 0x10, 0x8e, 0xbe, 0x1d, 0x4e, 0x6c, 0xff, 0x30, 0xf7, 0x32, 0x86, 0x39,
	0x8c, 0x9f, 0xd5, 0x77, 0xf3, 0xcf, 0x0f, 0x99, 0xe9, 0xc5, 0xef, 0xdc, 0x5b, 0x30, 0x9c, 0x41,
	0xbc, 0x52, 0xcd, 0x9e, 0x5a, 0x73, 0x1d, 0x3f, 0x60, 0x33, 0xb6, 0x60, 0x4b, 0x0e, 0x71, 0xa5,
	0xf2, 0x6d, 0xab, 0x4b, 0x67, 0x2d, 0x27, 0x17, 0x7b, 0xad, 0xed, 0x49, 0xd6, 0xec, 0xf3, 0xd6,
	0xdd, 0xe6, 0xe9, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x32, 0x40, 0x83, 0xa9, 0x01, 0x00, 0x00,
}
